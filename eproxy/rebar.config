{erl_opts, [
    warn_export_all,
    warn_export_vars,
    warn_obsolete_guard,
    warn_shadow_vars,
    warn_unused_function,
    warn_deprecated_function,
    warn_unused_import,
    warnings_as_errors
]}.
{minimum_otp_vsn, "22"}.
{deps, [
    jsx,
    observer_cli,
    cowlib,
    {cool_tools, {git, "https://github.com/yangcancai.git/cool_tools.git", {branch, "main"}}},
    eca
    %,
    % cowboy,
    % {eredis, {git, "https://github.com/wooga/eredis.git", {tag, "v1.2.0"}}},
    % {mysql_poolboy, ".*", {git, "https://github.com/mysql-otp/mysql-otp-poolboy",
    %  {tag, "0.2.1"}}}
]}.

% same as options for eunit:test(Tests, ...)
{eunit_opts, [export_all]}.
% same as Tests argument in eunit:test(Tests, ...)
{eunit_tests, []}.
{ct_compile_opts, [{parse_transform, cth_readable_transform}]}.
{ct_opts, [{ct_hooks, [cth_readable_failonly, cth_readable_shell]}]}.
% to avoid 'do eunit, ct' eating up the parse transform
{eunit_compile_opts, [
    {parse_transform, cth_readable_transform}
]}.

{cover_enabled, true}.
{dist_node, [
    {name, 'eproxy@127.0.0.1'},
    {setcookie, 'xxxx'}
]}.
{relx, [
    {release, {eproxy, "read from VERSION"}, [
        eproxy,
        eca,
        sasl
    ]},
    %% automatically picked up if the files
    %% exist but can be set manually, which
    %% is required if the names aren't exactly
    %% sys.config and vm.args
    {sys_config_src, "./config/sys.config.src"},
    {vm_args_src, "./config/vm.args.src"},
    %% the .src form of the configuration files do
    %% not require setting RELX_REPLACE_OS_VARS
    %% {sys_config_src, "./config/sys.config.src"},
    %% {vm_args_src, "./config/vm.args.src"}
    {overlay, [
        {mkdir, "bin/extensions"},
        {mkdir, "tmp"},
        {copy, "scripts/hooks/pre_start.sh", "bin/hooks/pre_start.sh"},
        {copy, "scripts/hooks/pre_stop.sh", "bin/hooks/pre_stop.sh"},
        {copy, "scripts/hooks/pre_install_upgrade.sh", "bin/hooks/pre_install_upgrade.sh"},
        {copy, "scripts/hooks/post_start.sh", "bin/hooks/post_start.sh"},
        {copy, "scripts/hooks/post_stop.sh", "bin/hooks/post_stop.sh"},
        {copy, "scripts/hooks/post_install_upgrade.sh", "bin/hooks/post_install_upgrade.sh"},
        {copy, "GIT_COMMIT_IDS", "GIT_COMMIT_IDS"},
        {copy, "scripts/extensions/reload", "bin/extensions/reload"}
    ]},
    {extended_start_script, true},
    {extended_start_script_hooks, [
        {pre_start, [{custom, "hooks/pre_start.sh"}]},
        {post_start, [
            wait_for_vm_start,
            {custom, "hooks/post_start.sh"},
            {pid, "tmp/eproxy.pid"}
        ]},
        {pre_stop, [
            {custom, "hooks/pre_stop.sh"}
        ]},
        {post_stop, [
            {custom, "hooks/post_stop.sh"}
        ]},
        {pre_install_upgrade, [{custom, "hooks/pre_install_upgrade.sh"}]},
        {post_install_upgrade, [{custom, "hooks/post_install_upgrade.sh"}]}
    ]},

    {extended_start_script_extensions, [
        {reload, "extensions/reload"}
    ]}
]}.

{profiles, [
    {test, [
        {erl_opts, [
            {d, 'TEST'},
            nowarn_export_all,
            export_all,
            {parse_transform, lager_transform}
        ]},
        {shell, [{config, "config/sys.config"}]},
        {deps, [
            jsx,
            recon,
            meck,
            {cth_readable, {git, "https://github.com/ferd/cth_readable.git", {tag, "v1.5.1"}}}
        ]}
    ]},
    {prod, [
        {relx,
            %% prod is the default mode when prod
            [
                %% profile is used, so does not have
                %% to be explicitly included like this
                % {mode, prod},
                {include_src, false},
                {include_erts, "override by rebar.config.script"},
                {system_libs, "override by rebar.config.script"}
                %% use minimal mode to exclude ERTS
                %  {mode, minimal}
            ]},
        {
            deps, [
                %% already compile with centos
                % {jiffy,{git, "https://xxx/library/jiffy.git", {branch, "master"}}}
            ]
        }
    ]}
]}.

{project_plugins, [
    {erlfmt, "v1.0.0"},
    {rebar3_format, "v1.2.0"},
    {rebar3_path_deps, "v0.4.0"},
    {coveralls, "v2.2.0"}
]}.

{format, [
    {files, ["apps/*/src/*.erl", "apps/*/include/*.hrl", "**/rebar.config"]},
    %% The erlfmt formatter interface
    {formatter, erlfmt_formatter}
]}.
